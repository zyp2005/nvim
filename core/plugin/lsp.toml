# ------------------------------------------------------
# coc.nvim : lsp客户端
# ------------------------------------------------------

[[plugins]]
repo = 'https://hub.fastgit.org/fannheyward/telescope-coc.nvim.git'

[[plugins]]
repo = 'https://hub.fastgit.org/neoclide/coc.nvim'
rev = 'release'
on_envent = 'BufReadPost'
hook_source = '''
	source $NVIM_PATH/modules/coc/coc.vim
	source $NVIM_PATH/modules/coc/git.vim
'''
# [[plugins]]
# repo = 'https://hub.fastgit.org/neovim/nvim-lspconfig'
# hook_source = '''
# lua << EOF
# local lspconfig = require'lspconfig'
# lspconfig.ccls.setup {}
# lspconfig.pyls.setup {}
# EOF
# nnoremap <silent>gl <cmd>lua vim.lsp.diagnostic.set_loclist()<CR>
# '''

# [[plugins]]
# repo = 'https://hub.fastgit.org/glepnir/lspsaga.nvim'
# on_event = 'BufRead'
# hook_source = '''
# nnoremap <silent> gr :Lspsaga lsp_finder<CR>
# function! s:show_documentation()
# 	if (index(['vim','help'], &filetype) >= 0)
# 		execute 'h '.expand('<cword>')
# 	else
# 		Lspsaga hover_doc
# 	endif
# endfunction
# nnoremap <silent> K :call <SID>show_documentation()<CR>
# nnoremap <silent><leader>ca :Lspsaga code_action<CR>
# vnoremap <silent><leader>ca :<C-U>Lspsaga range_code_action<CR>
# nnoremap <silent> <C-f> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(1)<CR>
# nnoremap <silent> <C-b> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(-1)<CR>
# nnoremap <silent>gh :Lspsaga signature_help<CR>
# nnoremap <silent>gn :Lspsaga rename<CR>
# nnoremap <silent>gd :Lspsaga preview_definition<CR>
# nnoremap <silent>gs :Lspsaga show_line_diagnostics<CR>
# nnoremap <silent><leader>= :Lspsaga diagnostic_jump_next<CR>
# nnoremap <silent><leader>- :Lspsaga diagnostic_jump_prev<CR>
# '''

# [[plugins]]
# repo = 'https://hub.fastgit.org/hrsh7th/nvim-compe.git'
# on_event = 'BufRead'
# hook_source = '''
# lua << EOF
# vim.o.completeopt = "menuone,noselect"
# require'compe'.setup {
#   enabled = true;
#   autocomplete = true;
#   debug = false;
#   min_length = 1;
#   preselect = 'enable';
#   throttle_time = 80;
#   source_timeout = 200;
#   incomplete_delay = 400;
#   max_abbr_width = 40;
#   max_kind_width = 100;
#   max_menu_width = 100;
#   documentation = true;

#   source = {
#     path = true;
#     buffer = true;
#     calc = true;
#     nvim_lsp = true;
#     nvim_lua = true;
#     vsnip = true;
#     ultisnips = true;
#   };
# }
# local t = function(str)
#   return vim.api.nvim_replace_termcodes(str, true, true, true)
# end

# local check_back_space = function()
#     local col = vim.fn.col('.') - 1
#     if col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') then
#         return true
#     else
#         return false
#     end
# end

# -- Use (s-)tab to:
# --- move to prev/next item in completion menuone
# --- jump to prev/next snippet's placeholder
# _G.tab_complete = function()
#   if vim.fn.pumvisible() == 1 then
#     return t "<C-n>"
#   elseif vim.fn.call("vsnip#available", {1}) == 1 then
#     return t "<Plug>(vsnip-expand-or-jump)"
#   elseif check_back_space() then
#     return t "<Tab>"
#   else
#     return vim.fn['compe#complete']()
#   end
# end
# _G.s_tab_complete = function()
#   if vim.fn.pumvisible() == 1 then
#     return t "<C-p>"
#   elseif vim.fn.call("vsnip#jumpable", {-1}) == 1 then
#     return t "<Plug>(vsnip-jump-prev)"
#   else
#     return t "<S-Tab>"
#   end
# end

# vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})
# vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
# vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
# vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
# EOF
# inoremap <silent><expr> <C-Space> compe#complete()
# inoremap <silent><expr> <CR>      compe#confirm('<CR>')
# inoremap <silent><expr> <C-e>     compe#close('<C-e>')
# inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
# inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })
# '''

# [[plugins]]
# repo = 'https://hub.fastgit.org/folke/trouble.nvim.git'
# on_map = '<space>x'
# hook_post_source = '''
# lua << EOF
#   require("trouble").setup {
#     position = "bottom", -- position of the list can be: bottom, top, left, right
#     height = 10, -- height of the trouble list when position is top or bottom
#     width = 50, -- width of the list when position is left or right
#     icons = true, -- use devicons for filenames
#     mode = "lsp_workspace_diagnostics", -- "lsp_workspace_diagnostics", "lsp_document_diagnostics", "quickfix", "lsp_references", "loclist"
#     fold_open = ">", -- icon used for open folds
#     fold_closed = "v", -- icon used for closed folds
#     action_keys = { -- key mappings for actions in the trouble list
#         close = "q", -- close the list
#         cancel = "<esc>", -- cancel the preview and get back to your last window / buffer / cursor
#         refresh = "r", -- manually refresh
#         jump = {"<cr>", "<tab>"}, -- jump to the diagnostic or open / close folds
#         jump_close = {"o"}, -- jump to the diagnostic and close the list
#         toggle_mode = "m", -- toggle between "workspace" and "document" diagnostics mode
#         toggle_preview = "P", -- toggle auto_preview
#         hover = "K", -- opens a small poup with the full multiline message
#         preview = "p", -- preview the diagnostic location
#         close_folds = {"zM", "zm"}, -- close all folds
#         open_folds = {"zR", "zr"}, -- open all folds
#         toggle_fold = {"za", "za"}, -- toggle fold of current file
#         previous = "k", -- preview item
#         next = "j" -- next item
#     },
#     indent_lines = true, -- add an indent guide below the fold icons
#     auto_open = false, -- automatically open the list when you have diagnostics
#     auto_close = false, -- automatically close the list when you have no diagnostics
#     auto_preview = false, -- automatyically preview the location of the diagnostic. <esc> to close preview and go back to last window
#     auto_fold = false, -- automatically fold a file trouble list at creation
#     signs = {
#         -- icons / text used for a diagnostic
#         error = "E",
#         warning = "W",
#         hint = "H",
#         information = "I",
#         other = "O"
#     },
#     use_lsp_diagnostic_signs = false -- enabling this will use the signs defined in your lsp client
#     }
#     local actions = require("telescope.actions")
#     local trouble = require("trouble.providers.telescope")

#     local telescope = require("telescope")

#     telescope.setup {
#       defaults = {
#         mappings = {
#           i = { ["<c-t>"] = trouble.open_with_trouble },
#           n = { ["<c-t>"] = trouble.open_with_trouble },
#         },
#       },
#     }
# EOF
# nnoremap <leader>x <cmd>TroubleToggle<cr>
# '''

# [[plugins]]
# repo = 'https://hub.fastgit.org/folke/lsp-colors.nvim.git'
# hook_source = '''
#    lua require("lsp-colors").setup()
# '''
