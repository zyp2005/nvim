# ------------------------------------------------------
# 增强插件
# ------------------------------------------------------

# 表格对齐，使用命令 Tabularize
[[plugins]]
repo = 'https://hub.fastgit.org/godlygeek/tabular'
on_cmd = 'Tabularize'
hook_add = 'source $NVIM_PATH/modules/enhanced/tabular_add.vim'

#格式化
[[plugins]]
repo = 'https://hub.fastgit.org/Chiel92/vim-autoformat'
on_cmd = ['Autoformat','tabe','LoadFormatTemplate']
hook_add = '''
	noremap <space>vl :tabe .clang-format<CR>:LoadFormatTemplate<CR>
	nnoremap <space>\ :Autoformat<CR>
'''
hook_source = 'source $NVIM_PATH/modules/enhanced/vim-autoformat.vim'

# 修改树
[[plugins]]
repo = 'https://hub.fastgit.org/mbbill/undotree'
on_map = 'UndotreeToggle'
hook_add = 'noremap <space>u :UndotreeToggle<CR>'
hook_source = 'source $NVIM_PATH/modules/enhanced/undotree.vim'


# 中文文档
[[plugins]]
repo = 'https://hub.fastgit.org/yianwillis/vimcdoc'

# 空白检测
[[plugins]]
repo = 'https://hub.fastgit.org/ntpeters/vim-better-whitespace.git'
hook_source = 'source $NVIM_PATH/modules/enhanced/vim-whitespace.vim'

# 翻译
[[plugins]]
repo = 'https://hub.fastgit.org/voldikss/vim-translator'
on_map = '<Plug>Translate'
hook_add = 'source $NVIM_PATH/modules/enhanced/vim-translator_add.vim'

[[plugins]]
repo = 'https://hub.fastgit.org/norcalli/nvim-colorizer.lua'
on_map = "ColorizerToggle"
hook_source = '''
set termguicolors
lua << EOF
require 'colorizer'.setup {
    DEFAULT_OPTIONS = {
        RGB      = true;         -- #RGB hex codes
        RRGGBB   = true;         -- #RRGGBB hex codes
        names    = true;         -- "Name" codes like Blue
        RRGGBBAA = false;        -- #RRGGBBAA hex codes
        rgb_fn   = false;        -- CSS rgb() and rgba() functions
        hsl_fn   = false;        -- CSS hsl() and hsla() functions
        css      = false;        -- Enable all CSS features: rgb_fn, hsl_fn, names, RGB, RRGGBB
        css_fn   = false;        -- Enable all CSS *functions*: rgb_fn, hsl_fn
        -- Available modes: foreground, background
        mode     = 'background'; -- Set the display mode.
      }
}
EOF
'''

[[plugins]]
repo = 'https://hub.fastgit.org/kevinhwang91/nvim-hlslens.git'
hook_source = '''
aug VMlens
    au!
    au User visual_multi_start lua require('vmlens').start()
    au User visual_multi_exit lua require('vmlens').exit()
aug END
'''

[[plugins]]
repo = 'https://hub.fastgit.org/nvim-treesitter/nvim-treesitter.git'
merged = 0
hook_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = "c",
    ignore_install = { "javascript" }, -- List of parsers to ignore installing
    highlight = {
    enable = true,              -- false will disable the whole extension
    disable = { "rust" },  -- list of language that will be disabled
    },
    incremental_selection = { enable = true },
    textobjects = { enable = true },
      refactor = {
    highlight_definitions = { enable = true },
    highlight_current_scope = { enable = false },
    smart_rename = {
      enable = false,
      keymaps = {
        smart_rename = "grr",
      },
    },
  },
      textobjects = {
    select = {
      enable = true,
      keymaps = {
        -- You can use the capture groups defined in textobjects.scm
        ["af"] = "@function.outer",
        ["if"] = "@function.inner",
        ["ac"] = "@class.outer",
        ["ic"] = "@class.inner",
        },
      },
  },
}
EOF
'''


[[plugins]]
repo = 'https://hub.fastgit.org/nvim-treesitter/nvim-treesitter-textobjects.git'

[[plugins]]
repo = 'https://hub.fastgit.org/nvim-treesitter/nvim-treesitter-refactor.git'
